#include <algorithm>
#include <cstring>
#include <iostream>
#include <map>
#include <string>
using namespace std;

enum class sign_type
{
	plus,
	minus
};
const std::map<std::string, sign_type> sign_map{
	{"+", sign_type::plus},
	{"-", sign_type::minus}};

class BigNum
{
	string value;
	sign_type sign;
public:
	BigNum(string v = "", sign_type s = sign_type::plus) : value(v), sign(s) {}
	BigNum(const string &);
	BigNum(const BigNum &);

	BigNum operator=(const BigNum &);
	BigNum operator+(const BigNum &) const;
	BigNum operator-(const BigNum &) const;
	BigNum operator*(const BigNum &) const;
	BigNum operator/(const BigNum &) const;
	BigNum remainder(const BigNum &) const;
	BigNum frac_part(const BigNum &) const;
	BigNum pow(const BigNum &) const;
	void swap(BigNum &);
	void change_sign();
	std::size_t length() const;

	friend istream &operator>>(istream &in, BigNum &);
	friend ostream &operator<<(ostream &out, BigNum);
};

class Fraction
{
	string denominator, numerator;
	sign_type sign;

public:
	Fraction(string n = "", string d = "", sign_type s = sign_type::plus) : numerator(n), denominator(d), sign(s) {}
	friend class BigNum;
	friend istream &operator>>(istream &in, Fraction &);
	friend ostream &operator<<(ostream &out, Fraction);
};

istream &operator>>(istream &in, Fraction &T)
{
	string s;
	in >> s;
	int i;
	return in;
}
ostream &operator<<(ostream &out, Fraction T) 
{
	sign_type sign = T.sign;
	string numerator = T.numerator, denominator = T.denominator;
	if (sign == sign_type::minus && numerator != "0")
		out << "-";
	if (numerator == "0")
		out << "0";
	else
		out << numerator << "/" << denominator;
	return out;
}

BigNum::BigNum(const BigNum &T)
{
	value = T.value;
	sign = T.sign;
}

BigNum::BigNum(const string &T)
{
	if ('-' == T[0])
	{
		sign = sign_type::minus;
		value = T.substr(1, T.size() - 1);
	}
	else
	{
		sign = sign_type::plus;
		value = T;
	}
}

istream &operator>>(istream &in, BigNum &T)
{
	string s;
	in >> s;
	if (s[0] == '-')
	{
		T.value = s.substr(1, s.size() - 1);
		T.sign = sign_type::minus;
	}
	else if (s[0] == '+')
	{
		T.value = s.substr(1, s.size() - 1);
		T.sign = sign_type::plus;
	}
	else
	{
		T.value = s;
		T.sign = sign_type::plus;
	}
	return in;
}

ostream &operator<<(ostream &out, BigNum T)
{
	if (T.sign == sign_type::minus && T.value != "0")
		out << '-';
	out << T.value;
	return out;
}

inline int compare(int a[], int b[])
{ //被除数>除数,返回1，否则返回-1，相等返回0；
	if (a[0] > b[0])
		return 1;
	if (a[0] < b[0])
		return -1;
	for (int i = a[0]; i > 0; i--)
	{ //从高位到低位比较
		if (a[i] > b[i])
			return 1;
		if (a[i] < b[i])
			return -1;
	}
	return 0;
}

inline void BigNum::swap(BigNum &T)
{
	sign_type sig = this->sign;
	string str = this->value;
	this->sign = T.sign;
	this->value = T.value;
	T.sign = sig;
	T.value = str;
}

inline void BigNum::change_sign()
{
	if (this->sign == sign_type::plus)
		this->sign = sign_type::minus;
	if (this->sign == sign_type::minus)
		this->sign = sign_type::plus;
}

inline int compare(const std::string &str1, const std::string &str2)
{
	if (str1.length() > str2.length())
		return 1;
	else if (str1.length() < str2.length())
		return -1;
	for (std::size_t i = 0; i < str1.length(); ++i)
	{
		if (str1.at(i) > str2.at(i))
			return 1;
		if (str1.at(i) < str2.at(i))
			return -1;
	}
	return 0;
}

std::size_t BigNum::length() const
{
	return value.length();
}

BigNum BigNum::operator=(const BigNum &T)
{
	this->value = T.value;
	this->sign = T.sign;
	return *this;
}

BigNum BigNum::operator+(const BigNum &T) const
{
	BigNum a = *this, b = T, res;
	if (b.sign == sign_type::minus && a.sign == sign_type::plus)
	{
		b.sign = sign_type::plus;
		return a - b;
	}
	else if (b.sign == sign_type::plus && a.sign == sign_type::minus)
	{
		a.sign = sign_type::plus;
		return b - a;
	}
	if (compare(a.value, b.value) == -1)
		a.swap(b);
	int flag = 0, lengtha = a.length(), lengthb = b.length(), i = 0;
	reverse(a.value.begin(), a.value.end());
	reverse(b.value.begin(), b.value.end());
	while (lengtha > 0)
	{
		char sum;
		if (lengthb > 0)
			sum = a.value[i] + b.value[i] - '0' - '0' + flag;
		else
			sum = a.value[i] - '0' + flag;
		res.value.push_back(sum % 10 + '0');
		if (sum / 10 == 1)
			flag = 1;
		else
			flag = 0;
		i++;
		lengtha--;
		lengthb--;
	}
	if (flag == 1)
		res.value.push_back('1');
	reverse(res.value.begin(), res.value.end());
	if (T.sign == sign_type::minus && this->sign == sign_type::minus)
		res.sign = sign_type::minus;
	return res;
}

BigNum BigNum::operator-(const BigNum &T) const
{
	BigNum minuend = *this, subtrahend = T, res("0", sign_type::plus);
	if (minuend.sign == sign_type::plus && subtrahend.sign == sign_type::minus)
	{
		subtrahend.change_sign();
		return minuend + subtrahend;
	}
	else if (minuend.sign == sign_type::minus && subtrahend.sign == sign_type::plus)
	{
		subtrahend.change_sign();
		return minuend + subtrahend;
	}
	if (compare(this->value, T.value) == 0)
		return res;
	if (compare(this->value, T.value) == -1)
	{
		minuend.swap(subtrahend);
		if (minuend.sign == sign_type::plus && subtrahend.sign == sign_type::plus)
			res.sign = sign_type::minus;
	}
	reverse(minuend.value.begin(), minuend.value.end());
	reverse(subtrahend.value.begin(), subtrahend.value.end());
	std::size_t i;
	for (i = 0; i < subtrahend.length(); i++)
		subtrahend.value.at(i) -= '0';
	for (i = 0; i < minuend.length(); i++)
		minuend.value.at(i) -= '0';
	for (i = 0; i < subtrahend.length(); i++)
		minuend.value.at(i) -= subtrahend.value.at(i);

	for (i = 0; i < minuend.length() - 1; i++)
		if (minuend.value.at(i) < 0)
		{
			minuend.value.at(i) += 10;
			minuend.value.at(i + 1)--;
		}
	for (i = minuend.length() - 1; i >= 0; i--)
		if (minuend.value.at(i) > 0)
			break;
	minuend.value.erase(i + 1, minuend.length());
	for (i = 0; i < minuend.length(); i++)
		minuend.value.at(i) += '0';
	reverse(minuend.value.begin(), minuend.value.end());
	res.value = minuend.value;
	return res;
}

BigNum BigNum::operator*(const BigNum &T) const
{
	BigNum res("0", sign_type::plus);
	string multiplicand = this->value, multiplier = T.value, temp_res(1000, '0');
	if (this->sign != T.sign)
		res.sign = sign_type::minus;
	reverse(multiplicand.begin(), multiplicand.end());
	reverse(multiplier.begin(), multiplier.end());
	for (std::size_t i = 0; i < multiplicand.length(); i++)
		for (std::size_t j = 0; j < multiplier.length(); j++)
		{
			std::size_t temp = (multiplicand[i] - '0') * (multiplier[j] - '0');
			temp_res[i + j + 1] = temp_res[i + j + 1] - '0' + (temp_res[i + j] - '0' + temp) / 10 + '0';
			temp_res[i + j] = (temp_res[i + j] - '0' + temp) % 10 + '0';
		}
	reverse(temp_res.begin(), temp_res.end());
	if (temp_res.find_first_not_of('0') != string::npos)
		res.value = temp_res.substr(temp_res.find_first_not_of('0'));
	return res;
}

BigNum BigNum::operator/(const BigNum &T) const
{
	BigNum res("0", sign_type::plus);
	try
	{ //除数为0异常处理
		if (T.value == "0")
			throw 'e';
	}
	catch (char e)
	{
		cout << "The divisor can't be zero!";
		return res;
	}
	if (this->sign != T.sign)
		res.sign = sign_type::minus;
	string dividend = this->value, divisor = T.value;
	int a[200], b[200], c[200], temp[200]; //除法数组
	memset(a, 0, sizeof(a));
	memset(b, 0, sizeof(b));
	memset(c, 0, sizeof(c));
	a[0] = dividend.length(); //x[0]存储被除数的位数
	b[0] = divisor.length();  //y[0]存储除数的位数
	for (int i = 1; i <= a[0]; i++)
		a[i] = dividend.at(a[0] - i) - '0';
	for (int i = 1; i <= b[0]; i++)
		b[i] = divisor.at(b[0] - i) - '0';
	c[0] = a[0] - b[0] + 1; //存储结果的整数部分的最大长度
	for (std::size_t i = c[0]; i > 0; i--)
	{
		memset(temp, 0, sizeof(temp));
		for (std::size_t j = 1; j <= b[0]; j++)
			temp[j + i - 1] = b[j]; //从i开始的地方，复制数组y到数组temp
		temp[0] = b[0] + i - 1;
		while (compare(a, temp) >= 0)
		{
			c[i]++;
			int flag = compare(a, temp);
			if (flag == 0)
				a[0] = 0;
			if (flag == 1)
			{
				for (std::size_t i = 1; i <= a[0]; i++)
				{
					if (a[i] < temp[i])
					{
						a[i + 1]--;
						a[i] += 10;
					}
					a[i] -= temp[i];
				}
				while (a[0] > 0 && a[a[0]] == 0)
					a[0]--;
			}
		}
	}
	while (c[0] > 0 && c[c[0]] == 0)
		c[0]--;	//删除前导0
	std::size_t i; //将结果的整数部分赋值到res
	if (c[0] != 0)
	{
		for (i = c[0]; i > 0; i--)
		{
			c[i] += '0';
			res.value += c[i];
		}
		res.value.erase(0, 1);
	}
	if (res.value == "")
		res.value = "0";
	return res;
}

BigNum BigNum::remainder(const BigNum &T) const
{
	BigNum res("0", sign_type::plus);
	try
	{ //除数为0异常处理
		if (T.value == "0")
			throw 'e';
	}
	catch (char e)
	{
		cout << "the divisor can't be zero!";
		res.value = "";
		return res;
	}
	if (this->sign != T.sign)
		res.sign = sign_type::minus;
	string x = this->value, y = T.value;
	int a[200], b[200], c[200], temp[200];
	memset(a, 0, sizeof(a));
	memset(b, 0, sizeof(b));
	memset(c, 0, sizeof(c));
	a[0] = x.length(); //x[0]存储被除数的位数
	b[0] = y.length(); //y[0]存储除数的位数
	for (int i = 1; i <= a[0]; i++)
		a[i] = x.at(a[0] - i) - '0';
	for (int i = 1; i <= b[0]; i++)
		b[i] = y.at(b[0] - i) - '0';
	c[0] = a[0] - b[0] + 1;
	for (int i = c[0]; i > 0; i--)
	{
		memset(temp, 0, sizeof(temp));
		for (int j = 1; j <= b[0]; j++)
			temp[j + i - 1] = b[j]; //从i开始的地方，复制数组y到数组temp
		temp[0] = b[0] + i - 1;
		while (compare(a, temp) >= 0)
		{
			c[i]++;
			int flag = compare(a, temp);
			if (flag == 0)
				a[0] = 0;
			if (flag == 1)
			{
				for (long i = 1; i <= a[0]; i++)
				{
					if (a[i] < temp[i])
					{
						a[i + 1]--;
						a[i] += 10;
					}
					a[i] -= temp[i];
				}
				while (a[0] > 0 && a[a[0]] == 0)
					a[0]--;
			}
		}
	}
	std::size_t i;
	if (a[0] != 0)
	{
		for (i = a[0]; i > 0; i--)
		{
			a[i] += '0';
			res.value += a[i];
		}
		res.value.erase(0, 1);
	}
	if (res.value == "")
		res.value = "0";
	return res;
}

BigNum BigNum::pow(const BigNum &T) const
{
	BigNum t("1", sign_type::plus), res("1", sign_type::plus), count("1", sign_type::plus);
	if (compare(this->value, "1") == 0)
		return *this;
	int status = compare(this->value, "0");
	switch (status)
	{
	case -1:
		res.value = "Order should be a positive integer!";
		return res;
	case 0:
		return res;
	}
	while (compare(count.value, T.value) < 1)
	{
		res = res * (*this);
		count = count + t;
	}
	return res;
}

BigNum BigNum::frac_part(const BigNum &T) const
{

	BigNum a = *this, c("10", sign_type::plus), res;
	int count = 0;
	cout << ".";
	while (count++ < 20)
	{
		a = a * c;
		BigNum temp = a / T;
		cout << temp.value;
		a = a.remainder(T);
	}
	return res;
}

int func1()
{
	BigNum a, b;
	char signal;
	std::cin >> a >> signal >> b;
	BigNum remain = a.remainder(b);
	switch (signal)
	{
	case '+':
		std::cout << a + b << std::endl;
		break;
	case '-':
		std::cout << a - b << std::endl;
		break;
	case '*':
		std::cout << a * b << std::endl;
		break;
	case '/':
		std::cout << a / b << remain.frac_part(b) << std::endl;
		break;
	case '%':
		std::cout << remain << std::endl;
		break;
	case '^':
		BigNum power = a.pow(b);
		std::cout << power << std::endl;
		break;
	}
	return 1;
}
int main()
{
	for (;;)
	{
		func1();
	}
	return 0;
}
